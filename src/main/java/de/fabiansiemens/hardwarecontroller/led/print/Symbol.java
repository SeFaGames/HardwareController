package de.fabiansiemens.hardwarecontroller.led.print;

/**
 * Mapping of various symbols to their respective 8x8 encoding.
 * Each symbol can be linked to an optional ASCII code which can be looked up using {@link #getByChar(char)}.
 * <p>
 * All ASCII printable characters are based on the "IBM BIOS 8x8" font.
 * All icons have been manually created for this component library and can not be referenced using ASCII characters.
 */
public enum Symbol {
    // Icons
    HEART((byte) 0x66, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x7E, (byte) 0x3C, (byte) 0x18),
    CROSS((byte) 0x81, (byte) 0x42, (byte) 0x24, (byte) 0x18, (byte) 0x18, (byte) 0x24, (byte) 0x42, (byte) 0x81),
    SMILEY_HAPPY((byte) 0x3C, (byte) 0x42, (byte) 0xA5, (byte) 0x81, (byte) 0xA5, (byte) 0x99, (byte) 0x42, (byte) 0x3C),
    SMILEY_SAD((byte) 0x3C, (byte) 0x42, (byte) 0xA5, (byte) 0x81, (byte) 0x99, (byte) 0xA5, (byte) 0x42, (byte) 0x3C),
    SMILEY_SHOCKED((byte) 0x3C, (byte) 0x42, (byte) 0xA5, (byte) 0x99, (byte) 0xA5, (byte) 0xA5, (byte) 0x5A, (byte) 0x3C),
    SMILEY_NEUTRAL((byte) 0x3C, (byte) 0x42, (byte) 0xA5, (byte) 0x81, (byte) 0xBD, (byte) 0xBD, (byte) 0x42, (byte) 0x3C),
    ARROW_UP((byte) 0x18, (byte) 0x3C, (byte) 0x7E, (byte) 0xFF, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18),
    ARROW_DOWN((byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0xFF, (byte) 0x7E, (byte) 0x3C, (byte) 0x18),
    ARROW_LEFT((byte) 0x10, (byte) 0x30, (byte) 0x70, (byte) 0xFF, (byte) 0xFF, (byte) 0x70, (byte) 0x30, (byte) 0x10),
    ARROW_RIGHT((byte) 0x08, (byte) 0x0C, (byte) 0x0E, (byte) 0xFF, (byte) 0xFF, (byte) 0x0E, (byte) 0x0C, (byte) 0x08),

    // ASCII: Uppercase Letters
    A('A', (byte) 0x30, (byte) 0x78, (byte) 0xCC, (byte) 0xCC, (byte) 0xFC, (byte) 0xCC, (byte) 0xCC, (byte) 0x00),
    B('B', (byte) 0xFC, (byte) 0x66, (byte) 0x66, (byte) 0x7C, (byte) 0x66, (byte) 0x66, (byte) 0xFC, (byte) 0x00),
    C('C', (byte) 0x3C, (byte) 0x66, (byte) 0xC0, (byte) 0xC0, (byte) 0xC0, (byte) 0x66, (byte) 0x3C, (byte) 0x00),
    D('D', (byte) 0xF8, (byte) 0x6C, (byte) 0x66, (byte) 0x66, (byte) 0x66, (byte) 0x6C, (byte) 0xF8, (byte) 0x00),
    E('E', (byte) 0xFE, (byte) 0x62, (byte) 0x68, (byte) 0x78, (byte) 0x68, (byte) 0x62, (byte) 0xFE, (byte) 0x00),
    F('F', (byte) 0xFE, (byte) 0x62, (byte) 0x68, (byte) 0x78, (byte) 0x68, (byte) 0x60, (byte) 0xF0, (byte) 0x00),
    G('G', (byte) 0x3C, (byte) 0x66, (byte) 0xC0, (byte) 0xC0, (byte) 0xCE, (byte) 0x66, (byte) 0x3E, (byte) 0x00),
    H('H', (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xFC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x00),
    I('I', (byte) 0x78, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x78, (byte) 0x00),
    J('J', (byte) 0x1E, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0xCC, (byte) 0xCC, (byte) 0x78, (byte) 0x00),
    K('K', (byte) 0xE6, (byte) 0x66, (byte) 0x6C, (byte) 0x78, (byte) 0x6C, (byte) 0x66, (byte) 0xE6, (byte) 0x00),
    L('L', (byte) 0xF0, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x62, (byte) 0x66, (byte) 0xFE, (byte) 0x00),
    M('M', (byte) 0xC6, (byte) 0xEE, (byte) 0xFE, (byte) 0xFE, (byte) 0xD6, (byte) 0xC6, (byte) 0xC6, (byte) 0x00),
    N('N', (byte) 0xC6, (byte) 0xE6, (byte) 0xF6, (byte) 0xDE, (byte) 0xCE, (byte) 0xC6, (byte) 0xC6, (byte) 0x00),
    O('O', (byte) 0x38, (byte) 0x6C, (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0x6C, (byte) 0x38, (byte) 0x00),
    P('P', (byte) 0xFC, (byte) 0x66, (byte) 0x66, (byte) 0x7C, (byte) 0x60, (byte) 0x60, (byte) 0xF0, (byte) 0x00),
    Q('Q', (byte) 0x78, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xDC, (byte) 0x78, (byte) 0x1C, (byte) 0x00),
    R('R', (byte) 0xFC, (byte) 0x66, (byte) 0x66, (byte) 0x7C, (byte) 0x6C, (byte) 0x66, (byte) 0xE6, (byte) 0x00),
    S('S', (byte) 0x78, (byte) 0xCC, (byte) 0xE0, (byte) 0x70, (byte) 0x1C, (byte) 0xCC, (byte) 0x78, (byte) 0x00),
    T('T', (byte) 0xFC, (byte) 0xB4, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x78, (byte) 0x00),
    U('U', (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xFC, (byte) 0x00),
    V('V', (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x78, (byte) 0x30, (byte) 0x00),
    W('W', (byte) 0xC6, (byte) 0xC6, (byte) 0xC6, (byte) 0xD6, (byte) 0xFE, (byte) 0xEE, (byte) 0xC6, (byte) 0x00),
    X('X', (byte) 0xC6, (byte) 0xC6, (byte) 0x6C, (byte) 0x38, (byte) 0x38, (byte) 0x6C, (byte) 0xC6, (byte) 0x00),
    Y('Y', (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x78, (byte) 0x30, (byte) 0x30, (byte) 0x78, (byte) 0x00),
    Z('Z', (byte) 0xFE, (byte) 0xC6, (byte) 0x8C, (byte) 0x18, (byte) 0x32, (byte) 0x66, (byte) 0xFE, (byte) 0x00),

    // ASCII: Lowercase Letters
    a('a', (byte) 0x00, (byte) 0x00, (byte) 0x78, (byte) 0x0C, (byte) 0x7C, (byte) 0xCC, (byte) 0x76, (byte) 0x00),
    b('b', (byte) 0xE0, (byte) 0x60, (byte) 0x60, (byte) 0x7C, (byte) 0x66, (byte) 0x66, (byte) 0xDC, (byte) 0x00),
    c('c', (byte) 0x00, (byte) 0x00, (byte) 0x78, (byte) 0xCC, (byte) 0xC0, (byte) 0xCC, (byte) 0x78, (byte) 0x00),
    d('d', (byte) 0x1C, (byte) 0x0C, (byte) 0x0C, (byte) 0x7C, (byte) 0xCC, (byte) 0xCC, (byte) 0x76, (byte) 0x00),
    e('e', (byte) 0x00, (byte) 0x00, (byte) 0x78, (byte) 0xCC, (byte) 0xFC, (byte) 0xC0, (byte) 0x78, (byte) 0x00),
    f('f', (byte) 0x38, (byte) 0x6C, (byte) 0x60, (byte) 0xF0, (byte) 0x60, (byte) 0x60, (byte) 0xF0, (byte) 0x00),
    g('g', (byte) 0x00, (byte) 0x00, (byte) 0x76, (byte) 0xCC, (byte) 0xCC, (byte) 0x7C, (byte) 0x0C, (byte) 0xF8),
    h('h', (byte) 0xE0, (byte) 0x60, (byte) 0x6C, (byte) 0x76, (byte) 0x66, (byte) 0x66, (byte) 0xE6, (byte) 0x00),
    i('i', (byte) 0x30, (byte) 0x00, (byte) 0x70, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x78, (byte) 0x00),
    j('j', (byte) 0x0C, (byte) 0x00, (byte) 0x0C, (byte) 0x0C, (byte) 0x0C, (byte) 0xCC, (byte) 0xCC, (byte) 0x78),
    k('k', (byte) 0xE0, (byte) 0x60, (byte) 0x66, (byte) 0x6C, (byte) 0x78, (byte) 0x6C, (byte) 0xE6, (byte) 0x00),
    l('l', (byte) 0x70, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x78, (byte) 0x00),
    m('m', (byte) 0x00, (byte) 0x00, (byte) 0xCC, (byte) 0xFE, (byte) 0xFE, (byte) 0xD6, (byte) 0xC6, (byte) 0x00),
    n('n', (byte) 0x00, (byte) 0x00, (byte) 0xF8, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x00),
    o('o', (byte) 0x00, (byte) 0x00, (byte) 0x78, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x78, (byte) 0x00),
    p('p', (byte) 0x00, (byte) 0x00, (byte) 0xDC, (byte) 0x66, (byte) 0x66, (byte) 0x7C, (byte) 0x60, (byte) 0xF0),
    q('q', (byte) 0x00, (byte) 0x00, (byte) 0x76, (byte) 0xCC, (byte) 0xCC, (byte) 0x7C, (byte) 0x0C, (byte) 0x1E),
    r('r', (byte) 0x00, (byte) 0x00, (byte) 0xDC, (byte) 0x76, (byte) 0x66, (byte) 0x60, (byte) 0xF0, (byte) 0x00),
    s('s', (byte) 0x00, (byte) 0x00, (byte) 0x7C, (byte) 0xC0, (byte) 0x78, (byte) 0x0C, (byte) 0xF8, (byte) 0x00),
    t('t', (byte) 0x10, (byte) 0x30, (byte) 0x7C, (byte) 0x30, (byte) 0x30, (byte) 0x34, (byte) 0x18, (byte) 0x00),
    u('u', (byte) 0x00, (byte) 0x00, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x76, (byte) 0x00),
    v('v', (byte) 0x00, (byte) 0x00, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x78, (byte) 0x30, (byte) 0x00),
    w('w', (byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0xD6, (byte) 0xFE, (byte) 0xFE, (byte) 0x6C, (byte) 0x00),
    x('x', (byte) 0x00, (byte) 0x00, (byte) 0xC6, (byte) 0x6C, (byte) 0x38, (byte) 0x6C, (byte) 0xC6, (byte) 0x00),
    y('y', (byte) 0x00, (byte) 0x00, (byte) 0xCC, (byte) 0xCC, (byte) 0xCC, (byte) 0x7C, (byte) 0x0C, (byte) 0xF8),
    z('z', (byte) 0x00, (byte) 0x00, (byte) 0xFC, (byte) 0x98, (byte) 0x30, (byte) 0x64, (byte) 0xFC, (byte) 0x00),

    // ASCII: Numbers
    ZERO('0', (byte) 0x7C, (byte) 0xC6, (byte) 0xCE, (byte) 0xDE, (byte) 0xF6, (byte) 0xE6, (byte) 0x7C, (byte) 0x00),
    ONE('1', (byte) 0x30, (byte) 0x70, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0xFC, (byte) 0x00),
    TWO('2', (byte) 0x78, (byte) 0xCC, (byte) 0x0C, (byte) 0x38, (byte) 0x60, (byte) 0xC4, (byte) 0xFC, (byte) 0x00),
    THREE('3', (byte) 0x78, (byte) 0xCC, (byte) 0x0C, (byte) 0x38, (byte) 0x0C, (byte) 0xCC, (byte) 0x78, (byte) 0x00),
    FOUR('4', (byte) 0x1C, (byte) 0x3C, (byte) 0x6C, (byte) 0xCC, (byte) 0xFE, (byte) 0x0C, (byte) 0x1E, (byte) 0x00),
    FIVE('5', (byte) 0xFC, (byte) 0xC0, (byte) 0xF8, (byte) 0x0C, (byte) 0x0C, (byte) 0xCC, (byte) 0x78, (byte) 0x00),
    SIX('6', (byte) 0x38, (byte) 0x60, (byte) 0xC0, (byte) 0xF8, (byte) 0xCC, (byte) 0xCC, (byte) 0x78, (byte) 0x00),
    SEVEN('7', (byte) 0xFC, (byte) 0xCC, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x30, (byte) 0x30, (byte) 0x00),
    EIGHT('8', (byte) 0x78, (byte) 0xCC, (byte) 0xCC, (byte) 0x78, (byte) 0xCC, (byte) 0xCC, (byte) 0x78, (byte) 0x00),
    NINE('9', (byte) 0x78, (byte) 0xCC, (byte) 0xCC, (byte) 0x7C, (byte) 0x0C, (byte) 0x18, (byte) 0x70, (byte) 0x00),

    // ASCII: Miscellaneous
    SPACE(' ', (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00),
    EXCLAMATION_MARK('!', (byte) 0x30, (byte) 0x78, (byte) 0x78, (byte) 0x30, (byte) 0x30, (byte) 0x00, (byte) 0x30, (byte) 0x00),
    DOUBLE_QUOTE('"', (byte) 0x6C, (byte) 0x6C, (byte) 0x6C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00),
    NUMBER_SIGN('#', (byte) 0x6C, (byte) 0x6C, (byte) 0xFE, (byte) 0x6C, (byte) 0xFE, (byte) 0x6C, (byte) 0x6C, (byte) 0x00),
    DOLLAR('$', (byte) 0x30, (byte) 0x7C, (byte) 0xC0, (byte) 0x78, (byte) 0x0C, (byte) 0xF8, (byte) 0x30, (byte) 0x00),
    PERCENT('%', (byte) 0x00, (byte) 0xC6, (byte) 0xCC, (byte) 0x18, (byte) 0x30, (byte) 0x66, (byte) 0xC6, (byte) 0x00),
    AMPERSAND('&', (byte) 0x38, (byte) 0x6C, (byte) 0x38, (byte) 0x76, (byte) 0xDC, (byte) 0xCC, (byte) 0x76, (byte) 0x00),
    QUOTE_SINGLE('\'', (byte) 0x60, (byte) 0x60, (byte) 0xC0, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00),
    PARENTHESIS_LEFT('(', (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x30, (byte) 0x18, (byte) 0x00),
    PARENTHESIS_RIGHT(')', (byte) 0x60, (byte) 0x30, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0x00),
    ASTERISK('*', (byte) 0x00, (byte) 0x66, (byte) 0x3C, (byte) 0xFF, (byte) 0x3C, (byte) 0x66, (byte) 0x00, (byte) 0x00),
    PLUS('+', (byte) 0x00, (byte) 0x30, (byte) 0x30, (byte) 0xFC, (byte) 0x30, (byte) 0x30, (byte) 0x00, (byte) 0x00),
    COMMA(',', (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x30, (byte) 0x30, (byte) 0x60),
    HYPHEN('-', (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFC, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00),
    PERIOD('.', (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x30, (byte) 0x30, (byte) 0x00),
    SLASH('/', (byte) 0x06, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0xC0, (byte) 0x80, (byte) 0x00),
    COLON(':', (byte) 0x00, (byte) 0x30, (byte) 0x30, (byte) 0x00, (byte) 0x00, (byte) 0x30, (byte) 0x30, (byte) 0x00),
    SEMICOLON(';', (byte) 0x00, (byte) 0x30, (byte) 0x30, (byte) 0x00, (byte) 0x30, (byte) 0x30, (byte) 0x60, (byte) 0x00),
    LESS('<', (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0xC0, (byte) 0x60, (byte) 0x30, (byte) 0x18, (byte) 0x00),
    EQUAL('=', (byte) 0x00, (byte) 0x00, (byte) 0xFC, (byte) 0x00, (byte) 0x00, (byte) 0xFC, (byte) 0x00, (byte) 0x00),
    GREATER('>', (byte) 0x60, (byte) 0x30, (byte) 0x18, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x60, (byte) 0x00),
    QUESTION('?', (byte) 0x78, (byte) 0xCC, (byte) 0x0C, (byte) 0x18, (byte) 0x30, (byte) 0x00, (byte) 0x30, (byte) 0x00),
    AT('@', (byte) 0x7C, (byte) 0xC6, (byte) 0xDE, (byte) 0xDE, (byte) 0xDE, (byte) 0xC0, (byte) 0x78, (byte) 0x00),
    BRACKET_LEFT('[', (byte) 0x78, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x60, (byte) 0x78, (byte) 0x00),
    BACKSLASH('\\', (byte) 0xC0, (byte) 0x60, (byte) 0x30, (byte) 0x18, (byte) 0x0C, (byte) 0x06, (byte) 0x02, (byte) 0x00),
    BRACKET_RIGHT(']', (byte) 0x78, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x78, (byte) 0x00),
    CARET('^', (byte) 0x10, (byte) 0x38, (byte) 0x6C, (byte) 0xC6, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00),
    UNDERSCORE('_', (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0xFF),
    GRAVE('`', (byte) 0x30, (byte) 0x30, (byte) 0x18, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00),
    BRACE_LEFT('{', (byte) 0x1C, (byte) 0x30, (byte) 0x30, (byte) 0xE0, (byte) 0x30, (byte) 0x30, (byte) 0x1C, (byte) 0x00),
    BAR('|', (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x00, (byte) 0x18, (byte) 0x18, (byte) 0x18, (byte) 0x00),
    BRACE_RIGHT('}', (byte) 0xE0, (byte) 0x30, (byte) 0x30, (byte) 0x1C, (byte) 0x30, (byte) 0x30, (byte) 0xE0, (byte) 0x00),
    TILDE('~', (byte) 0x76, (byte) 0xDC, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00);

    /**
     * ASCII character to which this symbol belongs to or -1 if no ASCII mapping is available
     */
    private final int ascii;

    /**
     * Byte array with 8 items to represent 8x8 LED matrix
     */
    private final byte[] rows;

    /**
     * Creates a new symbol without any ASCII character association
     *
     * @param rows Byte array with 8 items for 8x8 LED matrix
     */
    Symbol(byte... rows) {
        this(null, rows);
    }

    /**
     * Creates a new symbol associated to a specific ASCII character
     *
     * @param ascii ASCII character to be associated with
     * @param rows  Byte array with 8 items for 8x8 LED matrix
     */
    Symbol(Character ascii, byte... rows) {
        if (rows.length != 8) {
            throw new IllegalArgumentException("Rows must contain exactly 8 items for 8x8 LED matrix");
        }

        this.ascii = ascii != null ? ascii : -1;
        this.rows = rows;
    }

    /**
     * Returns the associated ASCII code for this symbol or -1 if not applicable.
     *
     * @return ASCII code of symbol or -1
     */
    public int getAscii() {
        return this.ascii;
    }

    /**
     * Returns the associated byte array to be used for displaying on the 8x8 LED matrix.
     *
     * @return Byte array with 8 items
     */
    public byte[] getRows() {
        return this.rows;
    }

    /**
     * Attempts to find a symbol associated to the given character and returns it.
     * Returns null if no symbol exists for the given character.
     *
     * @param c ASCII character to lookup
     * @return Symbol if found or null
     */
    public static Symbol getByChar(char c) {
        for (Symbol symbol : Symbol.values()) {
            if (symbol.getAscii() == c) {
                return symbol;
            }
        }
        return null;
    }
}
